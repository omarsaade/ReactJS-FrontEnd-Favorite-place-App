.env

REACT_APP_GOOGLE_API_KEY=...
REACT_APP_BACKEND_URL=http://localhost:5000/api
REACT_APP_ASSET_URL=http://localhost:5000
===================================


megamobile
megamobile111

user : megamobile@admin 
================
backend   MVC : Model View Controller


    1-  app.js: starting path (index.js)
         middleware function for handling error
     
    2-  routes: 
      places-routes: (exact path , fn) + validation 
      users-routes:  (exact path , fn) + validation 

    3-  controllers: 
      places-controllers.js: middleware fun tab3un kell path khassa bel places
      getPlaceById , getPlacesByUserId , createPlace , updatePlace , deletePlace

      users-controllers.js: middleware fun tab3un kell path khassa bel users
      getUsers , signup , login
       
      
     4-  models: Class HttpError (customizating error)
      

     5-  util: Location.js: converting addresses to coordinates


       
   



===============================================================


app.js


//  Third party library
const express = require("express");
const bodyParser = require("body-parser");
// importing our routes
const placesRoutes = require("./routes/places-routes");

const app = express();

app.use("/api/places", placesRoutes);

app.use((error, req, res, next) => {
  if (res.headersSent) {
    console.log(res.headersSent);
    return next(error);
  }
  res.status(error.code || 500);
  //   res.status(error.code || 500).json(...); fina na3mul chaining
  res.json({ message: error.message || "An unknown error occured!" });
});

app.listen(5000);







places-routes.js

const express = require("express");
const router = express.Router();

const DUMMY_PLACES = [
  {
    id: "p1",
    title: "Empire State Building",
    description: "One of the most famous sky scarpers in the world!",
    location: {
      lat: 40.7484474,
      lng: -73.987156,
    },
    address: "20 w 34th ST,  New York , NY 10001",
    creator: "u1",
  },
];

router.get("/:pid", (req, res, next) => {
  const placeId = req.params.pid;
  const place = DUMMY_PLACES.find((p) => {
    return p.id === placeId;
  });

  if (!place) {
    // kif mna3mul handle ?
    // 1 throw new Error(..) aw 2 next("error...");
    // async ..use next()  / synchronous use throw error
    const error = new Error("Could not find a place for the provided id.");
    error.code = 404;
    throw error;
  }

  res.json({ place }); // => {place} => {place:place}
});

router.get("/user/:uid", (req, res, next) => {
  const userId = req.params.uid;
  const place = DUMMY_PLACES.find((p) => {
    return p.creator === userId;
  });
  if (!place) {
    const error = new Error("Could not find a place for the provided user id.");
    error.code = 404;
    return next(error); // hon darure nhet return..fo2 throw hye bta3mul return
    // return res
    //   .status(404)
    //   .json({ message: "Could not find a place for the provided user id." });
  }
  res.json({ place });
});

module.exports = router;



================================================
google geocoding api

==================================================================================================================================
==================================================================================================================================
==================================================================================================================================
==================================================================================================================================
==================================================================================================================================
==================================================================================================================================

How to upload multiple images instead of single image
4 upvotes
Lampros · Lecture 164 · 3 years ago
Hello!

I have spent many hours and days trying to figure out how multiple images upload can work on New Place form. I know it's not what this course handles, but as I am following and learning this course content all the way from the beginning, I am very confused on other tutorials about this issue.

I have changed on the back-end on the router.post the fileUpload from  "fileUpload.single('image') to "fileUpload.array('image')"

to accept an array of images.

I have changed on the front-end on the ImageUpload Component, on the pickedHandler function like:

if (event.target.files && event.target.files.length !== 0) {
      pickedFile = event.target.files;
and added multiple on the <input     multiple />

I am not sure if the above changes are completely right and also,

I don't know how is this going to work on the NewPlace Component (maybe with a loop?)

I just want to make this work giving the possibility to the user to pick either one image either more than one.

I really appreciate this work, and also understand that can't all topics be covered but i really need to know how I can handle this issue, cause my University thesis project is based on this course, and as it's maybe a quick change for someone, please share your knowledge.

Thanks in advance

====================================================
he awal user
megamobile
megamobile111
user : megamobile@admin 

====================
tene user bel dabs
insearch
insearchofincredible

/*


{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon app.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@omarsaade/cors-node": "^1.1.1",
    "axios": "^1.2.5",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.1",
    "express": "^4.18.2",
    "express-validator": "^6.14.3",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^6.9.0",
    "mongoose-unique-validator": "^3.1.0",
    "multer": "^1.4.5-lts.1",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.20"
  }
}








*/
AIzaSyDgLmMpKCzveJf1_yuA0fUzzhy0WRChvZA






























=========================================
const fs = require("fs");
const userName = "Max";
/*
callback fn : a function which will be called for you 
once this operation is done cz write file is an Async task..so it can
 take a bit longer 

 */
// nodejs code
fs.writeFile("user-data.txt", "Name: " + userName, (err) => {
  if (err) {
    console.log(err);
    return;
  }
  console.log("WROTE FILE");
});

================================

// Importing http libraries
const http = require("http");
// Creating a server
//server object
const server = http.createServer((req, res) => {
  /*    const url = req.url;
    const method = req.method;
    console.log("Incoming Request");
    console.log(req.method, req.url);
    res.setHeader("Content-Type", "text/plain");
*/
  if (req.method === "POST") {
    let body = "";
    // Register an event listener for the end event li bisir la halo hon men baad
    // read lal data w hata bel chunk...yaane ma enta li 3amalet emit
    //.on is a method use to bind event handler.
    //No, these are event listeners, and their callback functions will only be fired when those particular events happen.  So the order doesn't really matter.
    req.on("end", () => {
      // 2
      //   console.log(body);
      const userName = body.split("=")[1]; //["username","omar"]
      res.end(`<h1> ${userName} </h1>`);
    });
    // Register an event listener for the data event
    // data is streamed into the server in chunks
    req.on("data", (chunk) => {
      /*
      1
      this req will run before the req.end
      Storing the chunk data
      */
      body += chunk;
    });
  } else {
    res.setHeader("Content-Type", "text/html");

    res.end(
      `<form method="POST"><input type="text" name="username"><button type="submit">Create User</button></form>`
    );
  }
});

// Starting the server
server.listen(5000);

================================================================

const express = require("express");
// this function will give us an app object ,
//  its a rich object full of functionalities and features in this app constant
const app = express();

// manually parsing data
app.use(function (req, res, next) {
  let body = "";
  req.on("end", () => {
    const userName = body.split("=")[1]; //["username","omar"]
    if (userName) {
      req.body = { name: userName };
    }
    next();
  });
  req.on("data", (chunk) => {
    body += chunk;
  });
});

// req and res hene object , next is fn
//next is called if u dont want to send the response in this middleware
//but u want to forward the request to the next middleware in line
// and then send the response
app.use((req, res, next) => {
  if (req.body) {
    return res.send("<h1>" + req.body.name + "</h1>");
  }

  res.send(
    `<form method="POST"><input type="text" name="username"><button type="submit">Create User</button></form>`
  );
  //   next();
});

//one feature here is again a listen method port 5000
app.listen(5000);


=============================================================

  "scripts": {
    "start": "node ./Max-Node/index.js"
    }

    he bt2elo npm start
    bas aya edem ger start..ex 

    
  "scripts": {
    "dev": "node ./Max-Node/index.js"
    }  


badak t2elo npm run dev
darure thet run iza shi ger start
================================================

REACT_APP_BACKEND_URL=https://omarsaade-mysecond-restful-apis-with.onrender.com/api
REACT_APP_ASSET_URL=https://omarsaade-mysecond-restful-apis-with.onrender.com
